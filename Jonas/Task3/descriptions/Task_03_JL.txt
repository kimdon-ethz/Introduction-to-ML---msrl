The Pandas library was used to import the given .csv files. It was first noted that there are much more inactive than active protein chains. Thus we attempted to upsample and downsample the data to have a more balanced data-set. Therefore the train and evaluate data is split immediately (we don't want to modify the evaluate data with up/downsampling). After Up/Downsampling the data needs to be encoded to be suitable for machine learning. First each Protein letter gets assigned an integer, then with that integer we can do one-hot encoding. The one-hot encoded vectors of each letter are then just stacked in a single vector to encode the whole sequence. For this I used sklearn's LabelEncoder and OneHot encoder. The encoded data can now be used as an input to a neural network. We choose the hyperparameters (batch size, optimizer, epochs, regularization) by training the MLP classifier with the train data, and evaluating it on the evaluation data that was split off earlier. We don't use cross-validation to save time as there is quite a bit of data. It turned out that down/upsampling was not required and that a shallow neural net with only one hidden layer was a very good option. Then after choosing the right hyper-parameters, the evaluation data and train data are combined again to train the MLP on the whole data-set. This MLP classifier can then be used on the provided test data-set to make predictions. 
